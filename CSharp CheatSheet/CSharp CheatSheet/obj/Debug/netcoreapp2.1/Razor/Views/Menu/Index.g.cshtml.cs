#pragma checksum "D:\Sapura\C# CheatSheet\CSharp CheatSheet\CSharp CheatSheet\Views\Menu\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c016aef1cbc4710bbd5fb17f8e58351c7816c8cb"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Menu_Index), @"mvc.1.0.view", @"/Views/Menu/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Menu/Index.cshtml", typeof(AspNetCore.Views_Menu_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Sapura\C# CheatSheet\CSharp CheatSheet\CSharp CheatSheet\Views\_ViewImports.cshtml"
using CSharp_CheatSheet;

#line default
#line hidden
#line 2 "D:\Sapura\C# CheatSheet\CSharp CheatSheet\CSharp CheatSheet\Views\_ViewImports.cshtml"
using CSharp_CheatSheet.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c016aef1cbc4710bbd5fb17f8e58351c7816c8cb", @"/Views/Menu/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b4f55ead7e6d17a1038fc1229575bae97ccf8c6e", @"/Views/_ViewImports.cshtml")]
    public class Views_Menu_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Tutorial/Introduction"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("btn btn-primary"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("role", new global::Microsoft.AspNetCore.Html.HtmlString("button"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Tutorial/ReadingAndWritingConsole"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "D:\Sapura\C# CheatSheet\CSharp CheatSheet\CSharp CheatSheet\Views\Menu\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(43, 122, true);
            WriteLiteral("\r\n<h2>Tutorial navigator</h2>\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-sm-6 col-md-4\">\r\n        <div class=\"thumbnail\">\r\n");
            EndContext();
            BeginContext(1220, 545, true);
            WriteLiteral(@"<div class=""caption"">
                <iframe width=""100%"" height=""200"" src=""https://www.youtube.com/embed/SXmVym6L8dw"" frameborder=""0"" allow=""accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>


                <h3>Introduction to C#</h3><p>
                    In this video, we will discuss<br />
                    1. Basic structure of a C# program.<br />
                    2. What is a Namespace.<br />
                    3. Purpose of Main method.<br />
                </p><p>");
            EndContext();
            BeginContext(1765, 86, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b577212663ac4e6a90bc48f76fc8a905", async() => {
                BeginContext(1837, 10, true);
                WriteLiteral("Learn more");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1851, 191, true);
            WriteLiteral("<a href=\"#\" class=\"btn btn-default\" role=\"button\">Add Favourite</a></p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-sm-6 col-md-4\">\r\n        <div class=\"thumbnail\">\r\n");
            EndContext();
            BeginContext(3097, 630, true);
            WriteLiteral(@"<div class=""caption"">
                <iframe width=""100%"" height=""200"" src=""https://www.youtube.com/embed/6QcHJ33YrYk"" frameborder=""0"" allow=""accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>
                <h3>Reading and writing to a console</h3><p>
                    1. Reading from the console<br />
                    2. Writing to the console<br />
                    3. Two ways to write to console<br />
                    a) Concatenation<br />
                    b) Place holder syntax -- Most preferred<br />
                </p><p>
                    ");
            EndContext();
            BeginContext(3727, 98, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "845b849178294a0293dbac4b9373bb14", async() => {
                BeginContext(3811, 10, true);
                WriteLiteral("Learn more");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(3825, 621, true);
            WriteLiteral(@"<a href=""#"" class=""btn btn-default"" role=""button"">Button</a>
                </p>
            </div>
        </div>
    </div>








    <div class=""col-sm-6 col-md-4"">
        <div class=""thumbnail"">

            <div id=""player""></div>


  

            <h3>Reading and writing to a console</h3><p>
                1. Reading from the console<br />
                2. Writing to the console<br />
                3. Two ways to write to console<br />
                a) Concatenation<br />
                b) Place holder syntax -- Most preferred<br />
            </p><p>
                ");
            EndContext();
            BeginContext(4446, 98, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6f2d4f3542eb4dc486b41ed33582e132", async() => {
                BeginContext(4530, 10, true);
                WriteLiteral("Learn more");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4544, 840, true);
            WriteLiteral(@"<a href=""#"" class=""btn btn-default"" role=""button"">Button</a>
            </p>
        </div>
    </div>
    



    
    <div class=""col-sm-6 col-md-4"">
        <div class=""thumbnail"">



            <iframe id=""existing-iframe-example""
                    width=""100%"" height=""200""
                    src=""https://www.youtube.com/embed/5g3TTPaGVzE?enablejsapi=1""
                    frameborder=""0""
                    style=""border: solid 4px #37474F""></iframe>

            <h3>Reading and writing to a console</h3><p>
                1. Reading from the console<br />
                2. Writing to the console<br />
                3. Two ways to write to console<br />
                a) Concatenation<br />
                b) Place holder syntax -- Most preferred<br />
            </p><p>
                ");
            EndContext();
            BeginContext(5384, 98, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f649a39755484be1a6dd0f2fe01d5917", async() => {
                BeginContext(5468, 10, true);
                WriteLiteral("Learn more");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5482, 835, true);
            WriteLiteral(@"<a href=""#"" class=""btn btn-default"" role=""button"">Button</a>
            </p>
        </div>
    </div> 
    
    
    <div class=""col-sm-6 col-md-4"">
        <div class=""thumbnail"">



            <iframe id=""existing-iframe-example""
                    width=""100%"" height=""200""
                    src=""https://www.youtube.com/embed/5g3TTPaGVzE?enablejsapi=1""
                    frameborder=""0""
                    style=""border: solid 4px #37474F""></iframe>

            <h3>Reading and writing to a console</h3><p>
                1. Reading from the console<br />
                2. Writing to the console<br />
                3. Two ways to write to console<br />
                a) Concatenation<br />
                b) Place holder syntax -- Most preferred<br />
            </p><p>
                ");
            EndContext();
            BeginContext(6317, 98, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "741c25c71e664874a3acd938ea488c07", async() => {
                BeginContext(6401, 10, true);
                WriteLiteral("Learn more");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(6415, 835, true);
            WriteLiteral(@"<a href=""#"" class=""btn btn-default"" role=""button"">Button</a>
            </p>
        </div>
    </div> 
    
    
    <div class=""col-sm-6 col-md-4"">
        <div class=""thumbnail"">



            <iframe id=""existing-iframe-example""
                    width=""100%"" height=""200""
                    src=""https://www.youtube.com/embed/5g3TTPaGVzE?enablejsapi=1""
                    frameborder=""0""
                    style=""border: solid 4px #37474F""></iframe>

            <h3>Reading and writing to a console</h3><p>
                1. Reading from the console<br />
                2. Writing to the console<br />
                3. Two ways to write to console<br />
                a) Concatenation<br />
                b) Place holder syntax -- Most preferred<br />
            </p><p>
                ");
            EndContext();
            BeginContext(7250, 98, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "284df2f3a3a44e29b9dbdb305a48ffbd", async() => {
                BeginContext(7334, 10, true);
                WriteLiteral("Learn more");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(7348, 1862, true);
            WriteLiteral(@"<a href=""#"" class=""btn btn-default"" role=""button"">Button</a>
            </p>
        </div>
    </div> 
    
    
   
    
    

</div>



<script>
    var channelName = 'kudvenkat';
    var vidHeight = 400;
    var vidWidth = 500;
    var vidMaxResult = 20; // Maximum can be 50

    $(document).ready(function () {
        $.get(""https://www.googleapis.com/youtube/v3/playlistItems"", {
            part: 'contentDetails',
            forUsername: channelName,
            key: 'AIzaSyB7cEKc5O5lr9aF10Gr3ODo_AFbIGOjjHM' //Browser API Key  
        },
            function (data) {
                $.each(data.items, function (i, item) {
                    console.log(item); // See in Browser Console  
                    pid = item.contentDetails.relatedPlaylists.uploads;
                    getVideos(pid);
                })
            }
        );
        function getVideos(pid) {
            $.get(""https://www.googleapis.com/youtube/v3/playlistItems"", {
                part:");
            WriteLiteral(@" 'snippet',
                maxResults: vidMaxResult,
                playlistId: pid,
                key: 'AIzaSyB7cEKc5O5lr9aF10Gr3ODo_AFbIGOjjHM' //Browser API Key  
            },
                function (data) {
                    var outputVideo;
                    $.each(data.items, function (i, item) {
                        console.log(item); // See in Browser Console  
                        vidId = item.snippet.resourceId.videoId;
                        outputVideo = '<li><iframe height=""' + vidHeight + '"" width=""' + vidWidth + '"" src=\""//www.youtube.com/embed/' + vidId + '""> </iframe></li>';

                        //Append to result list  
                        $('#result').append(outputVideo);
                    })
                }
            );
        }
    }); </script>




");
            EndContext();
            BeginContext(11007, 3997, true);
            WriteLiteral(@"






    












    <script type=""text/javascript"">
            var tag = document.createElement('script');
            tag.id = 'iframe-demo';
            tag.src = 'https://www.youtube.com/iframe_api';
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        //var key = 'AIzaSyB7cEKc5O5lr9aF10Gr3ODo_AFbIGOjjHM';
        //var playlistId = 'PLAC325451207E3105';
        //var URL = 'https://www.googleapis.com/youtube/v3/playlistItems';

            var player;
            function onYouTubeIframeAPIReady() {
                player = new YT.Player('existing-iframe-example', {
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });
            }
            function onPlayerReady(event) {
                document.getElementById('existing-");
            WriteLiteral(@"iframe-example').style.borderColor = '#FF6D00';
            }
            function changeBorderColor(playerStatus) {
                var color;
                if (playerStatus == -1) {
                    color = ""#37474F""; // unstarted = gray
                } else if (playerStatus == 0) {
                    color = ""#FFFF00""; // ended = yellow
                } else if (playerStatus == 1) {
                    color = ""#33691E""; // playing = green
                } else if (playerStatus == 2) {
                    color = ""#DD2C00""; // paused = red
                } else if (playerStatus == 3) {
                    color = ""#AA00FF""; // buffering = purple
                } else if (playerStatus == 5) {
                    color = ""#FF6DOO""; // video cued = orange
                }
                if (color) {
                    document.getElementById('existing-iframe-example').style.borderColor = color;
                }
            }
            function onPlayerStateChange(event) ");
            WriteLiteral(@"{
                changeBorderColor(event.data);
            }


        </script>






<script>
    $(document).ready(function () {



        var key = 'AIzaSyB7cEKc5O5lr9aF10Gr3ODo_AFbIGOjjHM';
        var playlistId = 'PLAC325451207E3105';
        var URL = 'https://www.googleapis.com/youtube/v3/playlistItems';

        var options = {
            part: 'snippet',
            key: key,
            maxResults: 20,
            playlistId: playlistId
        }

        loadVids();

        function loadVids() {
            $.getJSON(URL, options, function (data) {
                console.log(data);
                var id = data.items[0].snippet.resourceId.videoId;
                mainVid(id);
                resultsLoop(data);
            })
        }

        function mainVid(id) {
            $('#video').html(`<iframe 
                            width=""640"" height=""360"" src=""https://www.youtube.com/embed/${id}"" 
                            frameborder=""0"" style=""");
            WriteLiteral(@"border: solid 4px #37474F"" ></iframe>`);
        };



        function resultsLoop(data) {

            $.each(data.items, function (i, item) {

                var thumb = item.snippet.thumbnails.medium.url;
                var title = item.snippet.title;
                var desc = item.snippet.description.substring(0, 100);
                var vid = item.snippet.resourceId.videoId;

                $('main').append(` <img src=""${thumb}"" alt=""""  class=""thumb"">
                                    <h3>${title}</h3>
                                    <p>${desc}</p> <p<a href=""~/Tutorial/ReadingAndWritingConsole"" 
                                    class=""btn btn-primary"" role=""button"">Learn more</a><a href=""#""
                                    class=""btn btn-default"" role=""button"">Button</a> </p>
                `);
            });
        }
        


    });


</script>




");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
