#pragma checksum "D:\Sapura\C# CheatSheet\CSharp CheatSheet\CSharp CheatSheet\Views\Tutorial\CommonOperator.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e76cf1c88f9094abe029b966be0357f75afe62f7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Tutorial_CommonOperator), @"mvc.1.0.view", @"/Views/Tutorial/CommonOperator.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Tutorial/CommonOperator.cshtml", typeof(AspNetCore.Views_Tutorial_CommonOperator))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Sapura\C# CheatSheet\CSharp CheatSheet\CSharp CheatSheet\Views\_ViewImports.cshtml"
using CSharp_CheatSheet;

#line default
#line hidden
#line 2 "D:\Sapura\C# CheatSheet\CSharp CheatSheet\CSharp CheatSheet\Views\_ViewImports.cshtml"
using CSharp_CheatSheet.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e76cf1c88f9094abe029b966be0357f75afe62f7", @"/Views/Tutorial/CommonOperator.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b4f55ead7e6d17a1038fc1229575bae97ccf8c6e", @"/Views/_ViewImports.cshtml")]
    public class Views_Tutorial_CommonOperator : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "D:\Sapura\C# CheatSheet\CSharp CheatSheet\CSharp CheatSheet\Views\Tutorial\CommonOperator.cshtml"
  
    ViewData["Title"] = "CommonOperator";

#line default
#line hidden
            BeginContext(52, 2594, true);
            WriteLiteral(@"
<h2>CommonOperator</h2>

<div class=""panel panel-default"">
    <div class=""panel-heading"">Common Operator</div>
    <div class=""panel-body"">
        <div class=""embed-responsive embed-responsive-16by9"">
            <iframe width=""560"" height=""315"" src=""https://www.youtube.com/embed/xFWwWcZ74gU"" frameborder=""0"" allow=""accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>
        </div><br />
        <div>Code</div>
        <figure class=""highlight"">
            <pre><code><span>
                static void Main()
                {
                int Numerator = 10;
                int Denominator = 2;

                int Result = Numerator / Denominator;

                Console.WriteLine(""Result = {0}"", Result);
            </span></code></pre>
        </figure>
        <div>Output: </div>
        Result = 0
        <br /><br />
        <div>Code</div>
        <figure class=""highlight"">
            <pre><code><span>
                st");
            WriteLiteral(@"atic void Main()
                {
                    int Number = 10;
                    int AnotherNumber = 20;
                
                    if(Number == 10 || AnotherNumber == 20)
                    {
                    Console.WriteLine(""Hello"");
                    }
                }
            </span></code></pre>
        </figure>
        <div>Output: </div>
        Hello
        <br /><br />
        <div>Code</div>
        <figure class=""highlight"">
            <pre><code><span>
                static void Main()
                {
                    int Number 15;

                    bool IsNumber10 = Number == 10 ? true : false;

                    Console.WriteLine(""Number == 10 is {0}"", IsNumber10);
                }
            </span></code></pre>
        </figure>
        <div>Output: </div>
        Number == 10 is False
        <br /><br />
        <div>Code</div>
        <figure class=""highlight"">
            <pre><code><span>
                ");
            WriteLiteral(@"static void Main()
                {
                    int Number = 10;

                    bool IsNumber10;

                    if(Number == 10){
                        IsNumber10 = true;
                    }
                    else{
                        Isnumber10 = false;
                    }

                    Console.WriteLine(""Number == 10 is {0}"", IsNumber10);
                }
            </span></code></pre>
        </figure>
        <div>Output: </div>
        Number == 10 is true
    </div>
</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
